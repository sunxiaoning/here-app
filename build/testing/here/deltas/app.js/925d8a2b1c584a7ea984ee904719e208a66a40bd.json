["function _985b98d3c4f4097e6ac8498429d0eb39fb1e7d6c(){};",176303,37,92,1048484,1048576,249343,"{@link Ext.TitleBar}'s are most commonly used as a docked item within an",1203443,32,"e main difference between a {@link Ext.TitleBar} and an {@link Ext.Toolbar} is that\n *",1219287,33," is **always** centered horizontally in a {@link Ext.TitleBar} between\n * any items aligned left or right.\n *\n * You can also give items of a {@link Ext.TitleBar} an `align` configuration of `left` or `right`\n * which will dock them to the `left` or `right` of the bar",1212698,39,1841801,45,"xtype: 'titlebar',\n *",1112062,35,262888,32,904416,45,"iconCls: 'add',\n *                 align: 'left'",889216,55,1983227,36,"align: 'right",1305743,49,"    Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows the title being centered and buttons using align <i>left</i> and <i>right</i>.');\n *\n * <br />",1273309,39,"Viewport.add({\n *",1099761,39,"docked: 'top',\n *",262879,41,904416,45,"align: 'left',\n *                 text: 'This button has a super long title'",889216,55,1983227,36,"align: 'right",1305743,49,"    Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows how the title is automatically moved to the right when one of the aligned buttons is very wide.');\n *\n * <br />",1273309,39,"Viewport.add({\n *",1099761,39,"docked: 'top',\n *         title: 'A very long title",902224,59,"align: 'left',\n *                 text: 'This button has a super long title'",889216,55,"align: 'right',\n *                 text: 'Another b",1305738,54,"    Ext.Viewport.setStyleHtmlContent(true);\n *     Ext.Viewport.setHtml('This shows how the title and buttons will automatically adjust their size when the width of the items are too wide..');",1212500,35,"Toolbar's is {@link Ext.Button button}.\n */\r\nExt.define('Ext.TitleB",1215424,49,"itle",1215476,88,1043136,75,1215647,38,1043136,45,"cls: Ext.baseCSSPrefix + 'navigation-bar",1114448,41,"ui\n         * Style options for Toolbar. Either 'light' or 'dark'",1572160,45,1273632,39," {String",1215952,138,"titleAlign\n         * The alignment for t",1215972,72,"Align: 'center",1114448,41,1055789,35,1216125,120,755036,40,1216635,110,1043374,39,1979171,35,1577568,43,1055050,51,"TitleBar. The {@link #defaultType} of\n         * a TitleBar is {@link Ext.Button}, so you do not need to specify an `xtype` if you are adding\n         * buttons",1117600,37,"give items a `align` configuration which will align the item to the `left` or `right` of\n         * the TitleBa",1127136,34,"/\r\n        item",1367344,37,"String} maxButtonWidth The maximum width of the button by percentag",761872,44,"maxButtonWidth: '40%'\r\n    },",1979774,140,1249258,36,"titleAlign: 'lef",1118445,40,"heme: [\r\n                'Cupertino'\r\n            ],\r\n            maxButtonWidth: '80%'\r\n        }\r\n    ]",1217860,35,1128506,40,"this.applyItems = this.applyInitialItems",559033,49,"delete this.applyItems;\r\n        this.add(this.initialItems);\r\n        delete this.initialItems",1043951,34,"painted: 'refreshTitlePosition',",2001504,45,"},\r\n    applyInitial",906795,38,"me = this,\r\n            titleAlign = me.getTitleAlign()",1065777,42," || {};\r\n        me.initialItems = items;\r\n        me.leftBox = me.add({\r\n            xtype: 'container',\r\n            style: 'position: relative',\r\n            layout: {\r\n    ",1979182,39,"    align: 'cent",2044763,33,"listeners: {\r\n                resize: 'refreshTitlePosition",1229204,44,"\r\n        });\r\n        me.spacer = me.add(",1283067,48,"style: 'position: relative',\r\n            flex: 1",980991,45,"resize: 'refreshTitlePosition",1229204,44,"\r\n        });\r\n        me.rightBox = me.add({\r\n            xtype: 'container',\r\n            style: 'position: relative',\r\n            layout: {\r\n    ",1979182,39,"    align: 'cent",2044763,33,"listeners: {\r\n                resize: 'refreshTitlePosition",1229204,44,"\r\n        });\r\n        switch (titleAlign) {\r\n            case 'left':\r\n                me.titleComponent = me.leftBox.add({\r\n ",1099751,32,"',\r\n    ",305795,42,"title-align-left",1101792,32,"defaults.hidde",845872,40,"me.refreshTitlePosition",796742,33,"break;\r\n            case 'right':\r\n                me.titleComponent = me.rightBox.add({\r\n ",1099751,32,"',\r\n    ",305795,42,"title-align-right",1101792,32,"defaults.hidde",845872,40,"me.refreshTitlePosition",796742,33,2042985,46,"me.titleComponent = me.add({\r\n ",1099751,32,1101792,32,"defaults.hidden,\r\n                    centered",2018382,45,"break;\r\n        }\r\n        me.doAdd = me.doBoxAdd;\r\n        me.remove = me.doBoxRemove;\r\n        me.doInsert = me.doBoxInsert;\r\n    },\r\n    doBoxAdd",1065231,32,"item.config.align == 'right') {\r\n            this.rightBox.add",1418350,39,"this.leftBox.add",842384,32,"doBoxR",1069096,42,"if (item.config.align == 'right') {\r\n            this.rightBox.remove(item, destroy",1943184,39,"leftBox.remove(item, destroy);\r\n        }\r\n    },\r\n    doBox",1075800,41,"if (item.config.align == 'right') {\r\n            this.rightBox",1077181,32," else {\r\n            this.leftBox",1077181,38,"},\r\n    calculateMaxButtonWid",1244012,33,"ButtonWidth = this.getMaxButtonWidth();\r\n        //check if it is a percentage\r\n        if (Ext.isString(maxButtonWidth)) {\r\n            maxButtonWidth = parseInt(maxButtonWidth.replace('%', ''), 10);\r\n        }\r\n        maxButtonWidth = Math.round((this.element.getWidth() / 100) * maxButtonWidth);\r\n        return maxButtonWidth;\r\n    },\r\n    refreshTitle",985663,32,"if (",1022784,33,1938944,33,"itleElement = this.titleComponent.renderElement;\r\n        titleElement.setWidth(null);\r\n        titleElement.setLeft(null);\r\n        //set the min/max width of the left button\r\n        var leftBox = this.leftBox,\r\n            leftButton = leftBox.down('button'),\r\n            singleButton = leftBox.getItems().getCount() == 1,\r\n            leftBoxWidth, maxButtonWidth;\r\n        if (leftButton && singleButton) {\r\n            if (leftButton.getWidth() == null) {\r\n                leftButton.renderElement.setWidth('auto",60720,32,"leftBoxWidth = leftBox.rend",883728,35,"maxButtonWidth = this.calculateMaxButtonWidth();\r\n            if (leftBoxWidth > maxButtonWidth) {\r\n                leftButton.renderElement.setWidth(maxButton",1252330,39,"    var spacerBox = this.spacer.renderElement.getPageBox()",1966869,49,"titleElement.setWidth(spacerBox.width);\r\n        }\r\n        var titleBox = title",1103679,35,"widthDiff = titleBox.width - spacerBox.width,\r\n            titleLeft = titleBox.left,\r\n            titleRight = titleBox.right,\r\n            halfWidthDiff, leftDiff, rightDiff;\r\n        if (widthDiff > 0) {\r\n            halfWidthDiff = widthDiff / 2;\r\n            titleLeft += halfWidthDiff;\r\n            titleRight -= halfWidthDiff;\r\n            titleElement.setWidth(spacerBox.width);\r\n        }\r\n        leftDiff = spacerBox.left - titleLeft;\r\n        rightDiff = titleRight - spacerBox.right;\r\n        if (leftDiff > 0) {\r\n            titleElement.setLeft(leftDiff);\r\n        } else if (rightDiff > 0) {\r\n            titleElement.setLeft(-rightDiff);\r\n        }\r\n        titleElement.repaint(",1263135,39,1208189,42,"titleComponent.setTitle(newTitle);\r\n        if (this.isPainted()) {\r\n            this.refreshTitlePosition(",724240,37,1297920,678029,"This component is used in {@link Ext.navigation.View} to control animations in the toolbar. You should never need to\n * interact with the component directly, unless you are subclassing it.\n * @private\n * @author Robert Dougan <rob",1536099,34,"navigation.Bar', {\r\n    extend: Ext.TitleBar",1215480,84,1043136,75,1215647,38,1043136,45,"cls: Ext.baseCSSPrefix + 'navigation-bar",1114448,41,"ui\n         * Style options for Toolbar. Either 'light' or 'dark'",1572160,45,1273632,39," {String",1215952,44," You should NEVER set this, it is used internally. You set the title of the\n         * navigation bar by giving a navigation views children a title configuration.",181136,33,1134367,32,"tl",1223439,37,"\n         * @h",837407,46,1216184,51,"\n         * @ignor",761872,44,1979171,35,1577568,43,1055050,51,"NavigationBar. The {@link #cfg-defaultType} of\n         * a NavigationBar is {@link Ext.Button}, so you do not need to specify an `xtype` if you are adding\n         * buttons",1117600,37,"give items a `align` configuration which will align the item to the `left` or `right` of\n         * the NavigationBar.\n         * @h",837407,46,1216061,36,"BackButtonText\n         * The text to be displayed on the back button if:\n         * a) The previous view does not have a title\n         * b) The {@link #useTitleForBackButtonText} configuration is true.",181136,33,1274608,37,"BackButtonText: 'Bac",1204479,34,"Object} anim",265339,36,976208,32,"animation: {\r\n            duration: 3",976638,44,"{Boolean} useTitleForBackButtonText\n         * Set to false if you always want to display the {@link #defaultBackButtonText} as the text\n         * on the back button. True if you want to use the previous views title.",181136,33,1135167,33,"TitleForBackButtonText",1571184,42,"navigation.View} view A reference to the navigation view this bar is linked to.",181136,33,1335903,34,1555904,48,"ndroidAnimation Optionally enable CSS transforms on Android 2\n         * for NavigationBar animations.  Note that this may cause flickering if the\n         * NavigationBar is hidde",864016,45,"android2Transforms",864064,39,"Ext.Button/Object} backButton The configuration for the back button",181136,33,1515391,32,"ckButton: {\r\n            align: 'left',\r\n            ui: 'back',\r\n",1101804,34,"}\r\n    },",1979774,120,"\r\n            ],\r\n            animation: false",1986137,36,"@event back\n     * Fires when the back button was tapped.\n     * @param {Ext.navigation.Bar} this This bar",1445792,55,1217936,36,"!config.items) {\r\n            config.items",455895,32,"backButtonStack = [];\r\n        this.activeAnimations = [];",1832782,41,1218190,34,314688,32,"applyBackButt",1129132,32,"return Ext.factory(config, Ext.Button, this.getBackButton",1119215,57,"BackButton: function(newBackButton, oldBackButton) {\r\n        if (oldBackButton",1284827,32,"BackButton);\r\n        }\r\n        if (newBackButton) {\r\n            this.add(newBackButton);\r\n            newBackButton.on({\r\n",803615,46,"tap: this.onBackButtonTap",345392,42,"onBackButtonTa",861416,41,"back'",1371088,33,"@private\n     */\r\n    updateView: function(newView",534464,41,"backButton = me.getBackButton(),\r\n            innerItems, i, backButtonText, item, title, titleText;\r\n        me.getItems();\r\n        if (newView) {\r\n            //update the back button stack with the current inner items of the view\r\n            innerItems = newView.getInnerItems",31522,33,"innerItems.",71247,32,893545,35,"    title = (item.getTitle) ? item.getTitle() : item.config.title;\r\n                me.backButtonStack.push(title || '&nbsp;",60720,32,"titleText = me.getTitleText();\r\n            if (titleText",4048,35,"titleText = ''",691055,33,"setTitle(titleText);\r\n            backButtonText = me.getBackButtonText();\r\n            if (backButtonText) {\r\n                backButton.setText(backButtonText);\r\n                backButton.show()",925008,52,"@private\n     */\r\n    onViewAdd: function(view",1075214,47,"backButtonStack = me.backButtonStack,\r\n            hasPrevious, title;\r\n        me.endAnimation();\r\n        title = (item.getTitle) ? item.getTitle() : item.config.title;\r\n        backButtonStack.push(title || '&nbsp;');\r\n        hasPrevious = backButtonStack.length > 1;\r\n        me.doChangeView(view, hasPrevious, ",735168,32,"@private\n     */\r\n    onViewRemove: function(view",534464,41,"backButtonStack = me.backButtonStack,\r\n            hasPrevious;\r\n        me.endAnimation();\r\n        backButtonStack.pop();\r\n        hasPrevious = backButtonStack.length > 1;\r\n        me.doChangeView(view, hasPrevious,",1059757,32,"@private\n     */\r\n    doChangeView: function(view, hasPrevious, revers",571216,42,"leftBox = me.leftBox,\r\n            leftBoxElement = leftBox.element,\r\n            titleComponent = me.titleComponent,\r\n            titleElement = titleComponent.element,\r\n            backButton = me.getBackButton(),\r\n            titleText = me.getTitleText(),\r\n            backButtonText = me.getBackButtonText(),\r\n            animation = me.getAnimation() && view",1987005,42,"animated = ",890685,34," && view.isPainted(),\r\n            properties, leftGhost, titleGhost, leftProps, titleProps;\r\n        if (animated) {\r\n            leftGhost = me.createProxy(leftBox.element);\r\n            leftBoxElement.setStyle('opacity', '0');\r\n            backButton.setText(backButtonText);\r\n            backButton[hasPrevious ? 'show' : 'hide']();\r\n            titleGhost = me.createProxy(titleComponent.element.getParent());\r\n            titleElement.setStyle('opacity', '0');\r\n            me.setTitle(titleText);\r\n            properties = me.measureView(leftGhost, titleGhost, reverse);\r\n            leftProps = properties.left;\r\n            titleProps = properties.title;\r\n            me.isAnimating = true;\r\n            me.animate(leftBoxElement, leftProps.element);\r\n            me.animate(titleElement, titleProps.element",152736,32,"titleElement.setLeft(properties.titleLeft);\r\n                me",2018271,39,"me.refreshTitlePosition(",339728,33,873904,32," && !this.getAndroid2Transforms()) {\r\n                leftGhost.ghost.destroy();\r\n                titleGhost.ghost.destro",1660159,44,"me.animate(leftGhost.ghost, leftProps.ghost);\r\n                me.animate(titleGhost.ghost, titleProps.ghost",152736,32,"    leftGhost.ghost",175575,33,"titleGhost.ghost.destroy()",45391,36,49632,33,"if (hasPrevious) {\r\n                backButton.setText(backButtonText);\r\n                backButton.show",1660160,43,"backButton.hid",771935,33,"me.setTitle(titleText",1078192,38,"Calculates and returns the position values needed for the back button when you are pushing a titl",1445641,32,"measureView: function(oldLeft, oldTitle, revers",571216,42,"barE",1124564,34,"newLeftElement = me.leftBox.element,\r\n            titleElement = me.titleComponent.element,\r\n            minOffset = Math.min(barElement.getWidth() / 3, 200),\r\n            newLeftWidth = newLeftE",1930552,32,"barX = barElement.getX(),\r\n            barWidth = barE",1930552,32,"titleX = titleElement.getX(),\r\n            titleLeft = titleElement.getLeft(),\r\n            titleWidth = titleE",1930552,32,"oldLeftX = oldLeft.x,\r\n            oldLeftWidth = oldLeft.width,\r\n            oldLeftLeft = oldLeft.left,\r\n            useLeft = Ext.browser.is.AndroidStock2 && !this.getAndroid2Transforms(),\r\n            newOffset, oldOffset, leftAnims, titleAnims, omega, theta;\r\n        theta = barX - oldLeftX - oldLeftWidth;\r\n",884512,36,"newOffset = theta;\r\n            oldOffset = Math.min(titleX - oldLeftWidth, minOffse",1492192,35,"oldOffset = theta;\r\n            newOffset = Math.min(titleX - barX, minOffset);\r\n        }\r\n        if (useLeft) {\r\n            leftAnims = {\r\n        ",831391,32,878807,33,"        left: newOffset,\r\n        ",878890,40,1285536,32,"to: {",1013728,32,"0,\r\n        ",878890,40,293648,43,690224,33,"leftAnims = {\r\n        ",831391,32,878807,33,"        transform:",180224,32,"translateX: newOffset\r\n        ",1162911,36,"        opacity",1852336,49,"to: {",855861,35,":",180224,32,"translateX: 0\r\n        ",1162911,36,878898,32,"        }",1162909,38,"ghost: {\r\n        ",878871,35,"        transform:",180224,32,"translateX: oldOffset\r\n        ",1162911,36,"        opacity: 0",69456,57,";\r\n        }\r\n        theta = barX - titleX + newLeftWidth;\r\n        if ((oldLeftLeft + titleWidth) > titleX) {\r\n            omega = barX - titleX - titleWidth;\r\n        }\r\n",884512,36,"titleElement.setLeft(0);\r\n            oldOffset = barX + barWidth - titleX - titleWidth;\r\n            if (omega",10591,35,"newOffset = omeg",1478096,42,"newOffset = theta",1081248,33,"{\r\n            newOffset = barX + barWidth - titleX - titleWidth;\r\n            if (omega",10591,35,"oldOffset = omeg",1478096,42,"oldOffset = the",1505150,32,"newOffset = Math.max(titleLeft, newOffset);\r\n        }\r\n        if (useLeft) {\r\n            titleAnims = {\r\n        ",831391,32,878807,33,"        left: newOffset,\r\n        ",878890,40,1285536,32,"to: {",1013728,32,"titleLeft,\r\n        ",878890,40,293648,43,1262160,34,"itleAnims = {\r\n        ",831391,32,878807,33,"        transform:",180224,32,"translateX: newOffset\r\n        ",1162911,36,"        opacity",1852336,49,"to: {",855861,35,":",180224,32,"translateX: titleLeft\r\n        ",1162911,36,878898,32,"        }",1162909,38,"ghost: {\r\n        ",878871,35,"        transform:",180224,32,"translateX: oldOffset\r\n        ",1162911,36,"        opacity: 0",69456,57,430512,44,"left: leftAnims,\r\n            title: titleAnims,\r\n            titleLeft: titleLeft",346080,37,"Helper method used to animate elements.\n     * You pass it an element, objects for the from and to positions an option onEnd callback called when the animation is over.\n     * Normally this method is passed configurations returned from the methods such as #measureTitle(true) etc.\n     * It is called from the #pushLeftBoxAnimated, #pushTitleAnimated, #popBackButtonAnimated and #popTitleAnimated\n     * methods.\n     *\n     * If the current device is Android, it will use top/left to animate.\n     * If it is anything else, it will use transform",1986287,32,"nimate: function(element, ",339338,33,"me = this,\r\n            animation;\r\n        //reset the left of the element\r\n        element.setLeft(0);\r\n        config = Ext.apply(config, ",1882855,46,"easing: 'ease-in-out',\r\n            duration: me.getAnimation().duration || 250,\r\n",2015868,34,"\r\n        });\r\n        a",805016,32,"config);\r\n",1083020,63,"if (callback)",287904,34,"me);",1525979,42,"Ext.Animator.run(animation);\r\n        me.activeAnimations.push(animation);\r\n    },\r\n    end",719263,33,"var activeAnimations = this.activeAnimations,\r\n            animation, i, ln;\r\n        if (activeAnimations) {\r\n            ln = activeAnimation",1422093,67,"animation = activeAnimations[i];\r\n                if (animation",883469,33,"    animation.stopAnimation();",74448,48,1083195,34,18240,34,"this.activeAnimations = []",843019,33,"Title",985663,32,719296,38,2034840,35,1847797,32,"ext needed for the current back button at anytime",1492751,34,"BackButtonText: function() {\r\n        var text = this.backButtonStack[this.backButtonStack.length - 2],\r\n            useTitleForBackButtonText = this.getUseTitleForBackButtonText();\r\n        if (!useTitleForBackButtonTex",1119363,51," = this.getDefaultBackButtonText(",495743,46,"ext",476384,38,"text needed for the current title at anytime",1492751,34,"TitleTex",932608,37,"backButtonStack[this.backButtonStack",1437102,38,"Handles removing back button stacks from this bar\n     * @private\n     */\r\n    beforePop: function(count) {\r\n        count--;\r\n        for (var i = 0; i < count; i++) {\r\n            this.backButtonStack.pop",1070608,39,"We override the hidden method because we don't want to remove it from the view using display:none. Instead we just position it off\n     * the screen, much like the navigation bar proxy. This means that all animations, pushing, popping etc. all still work when if you hide/show\n     * this bar at any time.",1272304,32,800767,39,"if (!hidden",789438,33,"Style({\r\n                position: 'relative',\r\n                top: 'auto',\r\n                left: 'auto',\r\n                width: 'auto'",1939536,54,"element.setStyle({\r\n                position: 'absolute',\r\n                top: '-1000px',\r\n                left: '-1000px',\r\n                width: this.element.getWidth() + 'px'",345392,53,"Creates a proxy element of the passed element, and positions it in the same position, using absolute positioning.\n     * The createNavigationBarProxy method uses this to create proxies of the backButton and the title elements.\n     * @private\n     */\r\n    createProxy",439232,35,"ghost, x, y, left, width;\r\n        ghost = element.dom.cloneNode(true);\r\n        ghost.id = element.id + '-proxy';\r\n        //insert it into the toolbar\r\n        element.getParent().dom.appendChild(ghost);\r\n        //set the x/y\r\n        ghost = Ext.get(ghost);\r\n        x = element.getX();\r\n        y = element.getY();\r\n        left = element.getLeft();\r\n        width = element.getWidth();\r\n        ghost.setStyle('position', 'absolute');\r\n        ghost.setX(x);\r\n        ghost.setY(y);\r\n        ghost.setHeight(element.getHeight());\r\n        ghost.setWidth(width);",1101375,32,"x: x,\r\n            y: y,\r\n            left: left,\r\n",451267,39,"ghost: ghost",1602416,43,"Robert Dougan <rob@sencha.com>\n *\n * NavigationView is basically a {@link Ext.Container} with a {@link Ext.layout.Card card} layout, so only one view\n * can be visible at a time. However, NavigationView also adds extra functionality on top of this to allow\n * you to `push` and `pop` views at any time. When you do this, your NavigationView will automatically animate\n * between your current active view, and the new view you want to `push`, or the previous view you want to `pop`.\n *\n * Using the NavigationView is very simple. Here is a basic example of it in ac",594879,32,"var view = Ext.create('Ext.NavigationView",1046640,48,"items: [{\n *             title: 'First",262841,47,1110304,43,"Push a new view!",1110361,70,"use the push() method to push another view. It works much like\n *                     // add() or setActiveItem(). it accepts a view instance, or you can give it\n *                     // a view config.\n *                     view.push({\n *                         title: 'Secon",1213373,32,"tml: 'Second view!'\n *        ",1459818,32,"    }\n *             }]\n *         }]\n *     });\n *\n * Now, here comes the fun part: you can push any view/item into the NavigationView, at any time, and it will\n * automatically handle the animations between the two views, including adding a back button (if necessary)\n * and showing the new title.\n *\n *     view.push({\n *         title: 'A new view',\n *         html: 'Some new content'\n *     });\n *\n * As you can see, it is as simple as calling the {@link #method-push} method, with a new view (instance or object). Done.\n *\n * You can also `pop` a view at any time. This will remove the top-most view from the NavigationView, and animate back\n * to the previous view. You can do this using the {@link #method-pop} method (which requires no arguments).\n *\n *     view.pop();\n *\n *  Applications that need compatibility with ##Older Android## devices will want to see the {@link #layout} config for details on\n *  disabling navigation view animations as these devices have poor animation support and performance",1642607,44,"Navigation View Guide](../../../components/navigation_view.html)\n */\r\nExt.define('Ext.navigation.View",1984351,38,"alternateClassName: 'Ext.NavigationView',\r\n    xtype: 'navigationview",1207952,100,"Ext.baseCSSPrefix + 'navigationview",1246896,40,"/Object} navigationBar\n         * The NavigationBar used in this navigation view. It defaults to be docked to the top",1117600,32,"just pass in a normal object if you want to customize the NavigationBar.",1576956,40,"navigationBar: {\n         *         ui: 'dark',\n         *         docked: 'bottom'",1576640,40,"You **cannot** specify a *title* property in this configuration. The title of the navigationBar is taken\n         * from the configuration of this views children",1319165,32,".push({\n         *         title: 'This views title which will be shown in the navigation bar',\n         *         html: 'Some HTML'",133648,42,1248464,33,"vigationBar: {\r\n            docked: 'top",1599983,44,"String} defaultBackButtonText\n         * The text to be displayed on the back button if:\n         *\n         * - The previous view does not have a title.\n         * - The {@link #useTitleForBackButtonText} configuration is",751195,51,"defaultBackButtonText: 'Back",1246896,42,"useTitleForBackButtonText\n         * Set to `false` if you always want to display the {@link #defaultBackButtonText} as the text\n         * on the back button. `true` if you want to use the previous views titl",1515376,45,"useTitleForBackButtonTex",864063,40,1055050,51,"NavigationView",1055110,272,"title: 'My title',",1054748,35,1055389,92,"\n         * If you want a titl",1275088,32,"#navigationBar}, you must specify a `title` configuration in your\n         * view, like above",1222864,34,"Only one view will be visible at a time. If you want to change to another view, use the {@link #method-push} or\n         * {@link #setActiveItem} method",1134352,45,"/**\n         * @cfg {Object}\n         * Layout used in this navigation view, type must be set to 'card'.\n         * **Android NOTE:** Older Android devices have poor animation performance. It is recommended to set the animation to null, f",1576958,38," layout: {\n         *          type: 'card',\n         *          animation: null",978046,72,1985110,80,"duration: 300,\r\n    ",880237,45,878079,32,1985218,47,917487,32,"push\n     * Fires when a view is pushed into this navigation view\n     * @param {Ext.navigation.View",768029,36," @param {Mixed} view The view that has been pushed",726400,32,"pop\n     * Fires when a view is popped from this navigation view\n     * @param {Ext.navigation.View",768029,36," @param {Mixed} view The view that has been popped",1220144,33,"ack\n     * Fires when the back button in the navigation view was tapped.\n     * @param {Ext.navigation.View} this The component instance\\\n",1249050,82,1249193,45,"\r\n            ],\r\n            navigationBar: {\r\n                splitNavigation: true",7776,32,"]",1253149,71,",\r\n            navBar = me.getNavigationBar();\r\n        //add a listener onto the back button in the navigationbar\r\n        if (navBar) {\r\n            navBar.on({\r\n                back: me.onBackButtonTap",1229205,55,"    me.relayEvents(navBar, 'rightbuttontap');\r\n            me.relayEvents(me, {\r\n                add: 'push',\r\n                remove: 'pop'",347360,38,"var layout = me",851744,33," && !layout.isCar",1609693,40,"base layout for a NavigationView must always be a Card Layout'",1078192,60,"applyLayout",1370367,62,"return config",575856,42,"Called when the user taps on the back button\n     */\r\n    onBackButtonTap: function() {\r\n        this.pop();\r\n        this.fireEvent('back'",1371088,33,"Pushes a new view into this navigation view using the default animation that this view has.\n     * @param {Object} view The view to push",1067359,37,"new item you just pushed.\n     */\r\n    push: function(view) {\r\n        return this.add(view)",500800,38,"current active view from the stack and sets the previous view using the default animation\n     * of this view. You can also pass",1050894,38," to target what inner item to pop to.\n     * @param {Number/String/Object} count If a Number, the number of views you want to pop. If a String, the pops to a matching\n     * component query. If an Object, the pops to a matching view instance",1067359,37,"new active item\n     */\r\n    pop",1454816,33,"this.beforePop(count)) {\r\n            return this.doPop",1070608,39,"@private\n     * Calculates whether it needs to remove any items from the stack when you are popping more than 1\n     * item. If it does, it removes those views from the stack and returns `true`",481440,37,"it has removed views.\n     */\r\n    beforePop: function(cou",708768,43,1069205,46,"Ext.isString(count) || Ext.isObject(count)) {\r\n            var last = innerItems.length - 1,",128879,41,"= last",1075478,34,"if ((Ext.isString(count) && Ext.ComponentQuery.is(innerItems[i], count)) || (Ext.isObject(count) && count == innerItems[i])) {\r\n                    count = last - i",651024,47,1161136,35,"Ext.isNumber(count)",44080,59,"}\r\n        var ln = innerItems.length,\r\n            toRemove;\r\n        //default to 1 pop\r\n        if (!Ext.isNumber(count) || count < 1) {\r\n            count = 1;\r\n        }\r\n        //check if we are trying to remove more items than we have\r\n        count = Math.min(count, ln - 1);\r\n        if (count) {\r\n            //we need to reset the backButtonStack in the navigation bar\r\n            me.getNavigationBar().beforePop(count);\r\n            //get the items we need to remove from the view and remove theme\r\n            toRemove = innerItems.splice(-count, count - 1",31523,32,"toRemove.",71247,32,"this.remove(toRemove",1727230,34,374029,60,1986640,35,"Pop",1703216,52,1080653,46,"set the new active item to be the new last item of the stack\r\n        me.remove(innerItems[innerItems.length - 1]);\r\n        // Hide the backButton\r\n        if (innerItems.length < 3 && this.$backButton) {\r\n            this.$backButton.hide();\r\n        }\r\n        // Update the title container\r\n        if (this.$titleContainer) {\r\n            if (!this.$titleContainer.setTitle",347022,32,"error('You have selected to display a title in a component that does not                     support titles in NavigationView. Please remove the `title` configuration from your                     NavigationView item, or change it to a component that has a `setTitle` method",60719,33,"var item = innerItems[innerItems.length - 2];\r\n            this.$titleContainer.setTitle((item.getTitle) ? item.getTitle() : item.config.title",724960,34,".getActiveItem",1254639,36,"the previous item, if one exists.\n     * @return {Mixed} The previous view\n     */\r\n    getPreviousItem",897946,46,"getInnerItems();\r\n        return innerItems[innerItems.length - 2",1206750,39,"backbutton text accordingly in the {@link #navigationBar}",1234688,36,"UseTitleForBackButtonText: function(useTitleForBackButtonText) {\r\n        var navigationBar = this.getNavigationBar();\r\n        if (navigationBar) {\r\n            navigationBar.setUseTitleForBackButtonText(useTitleForBackButtonText",1078192,38,"Updates the backbutton text accordingly in the {@link #navigationBar}",1234688,36,"DefaultBackButtonText: function(defaultBackButtonText) {\r\n        var navigationBar = this.getNavigationBar();\r\n        if (navigationBar) {\r\n            navigationBar.setDefaultBackButtonText(defaultBackButtonText",1078192,38,"This is called when an Item is added to the BackButtonContainer of a SplitNavigation View\n     * @private\n     *\n     * @param toolbar\n     * @param item\n     */\r\n    onBackButtonContainerAdd: function(toolbar, item) {\r\n        item",1261466,45,"show: this.refreshBackButtonContainer,\r\n            hide: this.refreshBackButtonContainer",989564,35,"BackButtonContainer(",1400592,32,"is called when an Item is removed from the BackButtonContainer of a SplitNavigation View\n     * @private\n     *\n     * @param toolbar\n     * @param item\n     */\r\n    onBackButtonContainerRemove: function(toolbar, item) {\r\n        item.u",1261468,43,"show: this.refreshBackButtonContainer,\r\n            hide: this.refreshBackButtonContainer",989564,35,"BackButtonContainer(",1400592,32,"is used for Blackberry SplitNavigation to monitor the state of child items in the bottom toolbar.\n     * if no visible children exist the toolbar will be hidden",553200,32,"freshBackButton",730957,33,"if (!this.$backButtonContainer",559502,49,"i = 0,\r\n            backButtonContainer = this.$backButtonContainer,\r\n            items = backButtonContainer.items",1423900,41,"items.length",924880,34,".get(i);\r\n            if (!item.isHidden()) {\r\n                this.$backButtonContainer.show",1778224,43,"\r\n        }\r\n        this.$backButtonContainer.hid",493424,35,"applyNavigationBa",1028175,35,"me = thi",1031483,50,"\r\n                hidden: true,\r\n                docked: 'top",553775,38,"if (config.title) {\r\n            delete config.titl",1578015,32,"\"Ext.navigation.View: The 'navigationBar' configuration does not accept a 'title' property. You \" + \"set the title of the navigationBar by giving this navigation view's children a 'title' property.\");\r\n        }\r\n        config.view = this;\r\n        config.useTitleForBackButtonText = this.getUseTitleForBackButtonText();\r\n        // Blackberry specific nav setup where title is on the top title bar and the bottom toolbar is used for buttons and BACK\r\n        if (config.splitNavigation) {\r\n            this.$titleContainer = this.add({\r\n    ",1280212,40,"    xtype: 'titlebar',\r\n    ",1276354,38,"    title: this.$currentTitle || ''",815936,32,"ar containerConfig = (config.splitNavigation === true) ? {} : config.splitNavigation;\r\n            this.$backButtonContainer = this.add({\r\n",1841935,33,"\r\n",1281774,51,"hidden",2000094,37,"// Any item that is added to the BackButtonContainer should be monitored for visibility\r\n            // this will allow the toolbar to be hidden when no items exist in it.\r\n            this.$backButtonContainer",1229494,51,"add: me.onBackButtonContainerAdd,\r\n                remove: me.onBackButtonContainerRemov",815935,32,"this.$backButton = this.$backButtonContainer.add(",2044796,60,"Back',\r\n                hidden: true,\r\n                ui: 'back'",1376062,32,"/ Default config items go into the bottom bar\r\n            if (config.items) {\r\n                this.$backButtonContainer.add(config.item",1964752,32,"// If the user provided items and splitNav items, default items go into the bottom bar, split nav items go into the top\r\n            if (containerConfig.items) {\r\n                this.$titleContainer.add(containerConfig.item",1964752,32,"this.$backButton.on({\r\n",803615,46,"tap: this.onBackButtonTap\r\n            });\r\n",956800,40,"hidden: true,\r\n                docked: 'top",553775,45,"Ext.factory(config, Ext.navigation.Bar, this.getNavigationBar",1218512,41,"NavigationBar: function(newNavigationBar, oldNavigationBar) {\r\n        if (oldNavigationBar",1284827,32,"NavigationBar, true);\r\n        }\r\n        if (newNavigation",1988889,32,"NavigationBar",1078192,60,"apply",1082477,33,1080619,34,"me = this",1990007,46,1080686,67,"me.getItems();\r\n        // If we are not initialzed yet, we should set the active item to the last item in the stack\r\n        if (!me.initialized) {",1081057,37,1074408,33,1494381,38,"activeItem,\r\n            currentActiveItem\r\n        ])",1070096,66,"var me = this",1990007,61,"animation = me.getLayout().getAnimation();\r\n        if (innerIndex > 0) {",1987195,41,"isAnimation",1987246,42,"tru",294720,32,"me.setActiveItem(innerIndex - 1);\r\n            me.getNavigationBar().onViewRemove(me, innerItems[innerIndex], innerI",1068767,42,"@private\n     */\r\n    doRemove: function() {\r\n        var",1986988,44,";",890671,78,"Reverse(false",1084269,32,1723168,32,996032,35,1077532,42,"// Check for title configuration\r\n        if (item && item.getDocked() && item.config.title === true) {\r\n            this.$titleContainer",1427628,34,1077579,39,"var navigaitonBar = this.getInitialConfig().navigationBar;\r\n        if (!this.isItemsInitializing",1067839,39,"this.setActiveItem(item);\r\n            // Update the navigationBar\r\n            if (navigaitonBar) {\r\n                this.getNavigationBar().onViewAdd(this, item, index",128511,34,"Update the custom backButton\r\n            if (this.$backButtonContainer) {\r\n                this.$backButton.show(",954335,42,"item",1067839,39,"// Update the title container title\r\n            this.updateTitleContainerTitle((item.getTitle) ? item.getTitle() : item.config.titl",1923487,34,1986558,32,1077660,61,"/**\n     * @private\n     * Updates the title of the titleContainer, if it exists\n     */\r\n    updateTitleContainer",1977834,34,"if (this.$titleContainer) {\r\n            if (!this.$titleContainer.setTitle",347022,32,"error('You have selected to display a title in a component that does not                     support titles in NavigationView. Please remove the `title` configuration from your                     NavigationView item, or change it to a component that has a `setTitle` method",60719,33,"this.$titleContainer.setTitle(titl",1999696,40,"$currentTitle = titl",1836864,38,"Resets the view by removing all items between the first and last item",1067359,37,"view that is now active",1238718,43,"return this.pop(this.getInnerItems()",1455140,32,1975949,68622,"home.HomeContainer",2044575,46,"homeContainer',\r\n    title: '\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff',\r\n    iconCls: 'home',\r\n    items: [\r\n        {\r\n            title: '\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff",1118446,39,"itle: '\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff",1118446,39,"itle: '\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff'\r\n        }\r\n    ]\r\n});\r\n\r\nExt.define('here.view.my.MyContainer', {\r\n    extend: Ext.NavigationView,\r\n    xtype: 'myContainer',\r\n    config: {\r\n        tab: {\r\n            title: '\ufffff\ufffff\ufffff\ufffff\ufffff\ufffff',\r\n            iconCls: 'user'\r\n        }\r\n    }\r\n});",2044545,2388]